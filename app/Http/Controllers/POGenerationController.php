<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\PurchaseRequest;
use App\Models\User;
use App\Models\PODocument;

class POGenerationController extends Controller
{
    public function index()
    {
        // Get all approved purchase requests
        $approvedPRs = PurchaseRequest::with('user')
            ->where('status', 'approved')
            ->orderBy('created_at', 'desc')
            ->paginate(10);

        // Get PO documents
        $poDocuments = PODocument::orderBy('created_at', 'desc')
            ->paginate(10);

        return view('staff.po_generation', compact('approvedPRs', 'poDocuments'));
    }

    public function show(PurchaseRequest $purchaseRequest)
    {
        // Check if PR is approved
        if ($purchaseRequest->status !== 'approved') {
            return response()->json(['error' => 'Only approved PRs can be viewed for PO generation.'], 403);
        }

        return response()->json([
            'id' => $purchaseRequest->id,
            'pr_number' => $purchaseRequest->pr_number,
            'entity_name' => $purchaseRequest->entity_name,
            'fund_cluster' => $purchaseRequest->fund_cluster,
            'office_section' => $purchaseRequest->office_section,
            'date' => $purchaseRequest->date->toDateString(),
            'unit' => $purchaseRequest->unit,
            'quantity' => $purchaseRequest->quantity,
            'unit_cost' => $purchaseRequest->unit_cost,
            'total_cost' => $purchaseRequest->total_cost,
            'item_description' => $purchaseRequest->item_description,
            'delivery_address' => $purchaseRequest->delivery_address,
            'purpose' => $purchaseRequest->purpose,
            'requested_by_name' => $purchaseRequest->requested_by_name,
            'delivery_period' => $purchaseRequest->delivery_period,
            'status' => $purchaseRequest->status,
            'status_color' => $this->getStatusColorClass($purchaseRequest->status),
            'requesting_unit' => $purchaseRequest->user->name,
            'created_at' => $purchaseRequest->created_at->format('M d, Y H:i'),
        ]);
    }

    public function generatePO(PurchaseRequest $purchaseRequest)
    {
        // Check if PR is approved
        if ($purchaseRequest->status !== 'approved') {
            return response()->json(['success' => false, 'message' => 'Only approved PRs can generate POs.'], 403);
        }

        // Redirect to the PO generation form instead of generating directly
        return response()->json([
            'success' => true,
            'redirect' => route('staff.generate_po.form', $purchaseRequest)
        ]);
    }

    private function getStatusColorClass($status)
    {
        return match ($status) {
            'draft' => 'bg-gray-100 text-gray-800',
            'pending' => 'bg-yellow-100 text-yellow-800',
            'approved' => 'bg-green-100 text-green-800',
            'rejected' => 'bg-red-100 text-red-800',
            'po_generated' => 'bg-blue-100 text-blue-800',
            'failed' => 'bg-red-100 text-red-800',
            default => 'bg-gray-100 text-gray-800',
        };
    }

    public function showGenerateForm(PurchaseRequest $purchaseRequest)
    {
        // Check if PR is approved
        if ($purchaseRequest->status !== 'approved') {
            return redirect()->route('staff.po_generation')->with('error', 'Only approved PRs can generate POs.');
        }

        // Get active suppliers
        $suppliers = \App\Models\Supplier::where('status', 'active')->orderBy('supplier_name')->get();

        // Generate PO number
        $autoGeneratedPONumber = 'PO ' . date('Y') . '-' . str_pad(PurchaseRequest::where('status', 'po_generated')->count() + 1, 4, '0', STR_PAD_LEFT);

        return view('staff.generate_po', compact('purchaseRequest', 'suppliers', 'autoGeneratedPONumber'));
    }

    public function storeGeneratedPO(Request $request, PurchaseRequest $purchaseRequest)
    {
        // Check if PR is approved
        if ($purchaseRequest->status !== 'approved') {
            return redirect()->route('staff.po_generation')->with('error', 'Only approved PRs can generate POs.');
        }

        $request->validate([
            'supplier_id' => 'required|exists:suppliers,id',
            'po_number' => 'required|string|max:255',
            'supplier_address' => 'required|string|max:1000',
            'supplier_tin' => 'nullable|string|max:255',
            'mode_of_procurement' => 'required|string|max:255',
            'place_of_delivery' => 'required|string|max:1000',
            'delivery_term' => 'required|string|max:255',
            'payment_term' => 'required|string|max:255',
            'date_of_delivery' => 'required|date',
        ]);

        try {
            // Update PR with PO details
            $purchaseRequest->update([
                'po_number' => $request->po_number,
                'status' => 'po_generated',
                'po_generated_at' => now(),
                'po_generated_by' => auth()->user()->name,
                'supplier_id' => $request->supplier_id,
                'mode_of_procurement' => $request->mode_of_procurement,
                'delivery_term' => $request->delivery_term,
                'payment_term' => $request->payment_term,
                'date_of_delivery' => $request->date_of_delivery,
            ]);

            return redirect()->route('staff.po_generation')->with('success', 'Purchase Order generated successfully!');
        } catch (\Exception $e) {
            return back()->withErrors(['error' => 'Error generating PO: ' . $e->getMessage()]);
        }
    }
}
